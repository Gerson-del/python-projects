# -*- coding: utf-8 -*-
"""Calculadora de bases

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZKVu1b5puiT14dGNZr3beEv6UNzvJsJA

calculadora de binario

muestra el numero en cualquier base a las bases que desees

-suma dos numeros decimales y muestra la suma en la base que desees y decimal

-suma numeros en cualquier base muestra la suma en esa base y en decimal

-negative number

-negative base

-decimals

-insert numbers with letters :3
"""

def to_string(num,base):
  num = int(num)
  base = int(base)
  conver_tString = "0123456789ABCDEF"


  if num < base:
    return conver_tString[num]
  else:
    return to_string(num // base,base) + conver_tString[num % base]


def convert_to_decimal(n,base):
  n = str(n).upper()
  if "." in n:
    power = len(n[:n.index(".")]) - 1
  else:
    power = len(n) - 1
  number = 0
  for i in n:
    if i == ".":
      continue
    elif i == "A":
      i = 10
    elif i == "B":
      i = 11
    elif i == "C":
      i = 12
    elif i == "D":
      i = 13
    elif i == "E":
      i = 14
    elif i == "F":
      i = 15

    number += (float(i)) *(int(base)**int(power))
    power -= 1

  return number

def check_base(number,base):
  """
  This function check is a base is valid
  """

  number = str(number)
  base = int(base)
  numbers_allowed = []
  for i in range(base):
    numbers_allowed.append(i)

  for i in number:
    if int(i) not in numbers_allowed:
      return False
  return True



#Lets show the numbers in any base you want


number_base = input("Enter the number and the base (Separated by commas): ")
new_base = input("Enter the new base in which you want to display the number: ")

neg = [1]

if float(number_base[number_base.index(",") + 1:]) < 0 or "." in number_base[number_base.index(",") + 1:]:
  print("Invalid base")
else:

  if int(number_base[:number_base.index(",")]) < 0:
    neg[0] = -1
    number_base = number_base.replace("-","")

  if check_base(number_base[:number_base.index(",")],number_base[number_base.index(",") + 1:]):

    number_base = number_base.split(",")

    if new_base == "10":
      print(f"Number in base {number_base[1]}: {neg[0] * int(number_base[0])} ")
      print(f"number in base {new_base}: { neg[0] * int(convert_to_decimal(number_base[0],number_base[1]))}")
    else:
      print(f"Number in base {number_base[1]}: {neg[0] * int(number_base[0])} ")
      print(f"number in base {new_base}: {neg[0] * int(to_string(convert_to_decimal(number_base[0],number_base[1]),new_base))}")
  else:
    print("The number and the current base are incompatible")

def to_string(num,base):

  neg = []
  if num < 0:
    neg.append(-1)
    num = num[num.index("-") + 1:]
  num = int(num)
  base = int(base)
  conver_tString = "0123456789ABCDEF"


  if num < base:
    return conver_tString[num]
  else:
    return to_string(num // base,base) + conver_tString[num % base]

to_string(-16,4)

def check_base(number,base):
  number = str(number)
  base = int(base)
  numbers_allowed = []
  for i in range(base):
    numbers_allowed.append(i)

  for i in number:
    if int(i) not in numbers_allowed:
      return False
  return True

check_base(102012012023,3)

neg = [1]

#neg[0] = -1

print(neg[0]*5)

